// Generated by gencpp from file h3_msgs/State.msg
// DO NOT EDIT!


#ifndef H3_MSGS_MESSAGE_STATE_H
#define H3_MSGS_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace h3_msgs
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : header()
    , name()
    , status(0)
    , joint_name()
    , joint_control_type()
    , joint_position()
    , joint_velocity()
    , joint_motor_torque()
    , joint_torque_sensor()
    , battery_voltage(0.0)
    , right_heel_sensor(0)
    , right_toe_sensor(0)
    , left_heel_sensor(0)
    , left_toe_sensor(0)
    , trigger_input(0)
    , command_app(0)
    , trigger_counter(0)
    , runtime_min(0)
    , runtime_sec(0)
    , runtime_csec(0)
    , connection_status(0)
    , recording_status(0)  {
    }
  State_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , status(0)
    , joint_name(_alloc)
    , joint_control_type(_alloc)
    , joint_position(_alloc)
    , joint_velocity(_alloc)
    , joint_motor_torque(_alloc)
    , joint_torque_sensor(_alloc)
    , battery_voltage(0.0)
    , right_heel_sensor(0)
    , right_toe_sensor(0)
    , left_heel_sensor(0)
    , left_toe_sensor(0)
    , trigger_input(0)
    , command_app(0)
    , trigger_counter(0)
    , runtime_min(0)
    , runtime_sec(0)
    , runtime_csec(0)
    , connection_status(0)
    , recording_status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint8_t _status_type;
  _status_type status;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _joint_name_type;
  _joint_name_type joint_name;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _joint_control_type_type;
  _joint_control_type_type joint_control_type;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_position_type;
  _joint_position_type joint_position;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_velocity_type;
  _joint_velocity_type joint_velocity;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_motor_torque_type;
  _joint_motor_torque_type joint_motor_torque;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_torque_sensor_type;
  _joint_torque_sensor_type joint_torque_sensor;

   typedef double _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef uint8_t _right_heel_sensor_type;
  _right_heel_sensor_type right_heel_sensor;

   typedef uint8_t _right_toe_sensor_type;
  _right_toe_sensor_type right_toe_sensor;

   typedef uint8_t _left_heel_sensor_type;
  _left_heel_sensor_type left_heel_sensor;

   typedef uint8_t _left_toe_sensor_type;
  _left_toe_sensor_type left_toe_sensor;

   typedef uint8_t _trigger_input_type;
  _trigger_input_type trigger_input;

   typedef uint8_t _command_app_type;
  _command_app_type command_app;

   typedef uint8_t _trigger_counter_type;
  _trigger_counter_type trigger_counter;

   typedef uint8_t _runtime_min_type;
  _runtime_min_type runtime_min;

   typedef uint8_t _runtime_sec_type;
  _runtime_sec_type runtime_sec;

   typedef uint8_t _runtime_csec_type;
  _runtime_csec_type runtime_csec;

   typedef uint8_t _connection_status_type;
  _connection_status_type connection_status;

   typedef uint8_t _recording_status_type;
  _recording_status_type recording_status;





  typedef boost::shared_ptr< ::h3_msgs::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::h3_msgs::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::h3_msgs::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::h3_msgs::State > StatePtr;
typedef boost::shared_ptr< ::h3_msgs::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::h3_msgs::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::h3_msgs::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::h3_msgs::State_<ContainerAllocator1> & lhs, const ::h3_msgs::State_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.name == rhs.name &&
    lhs.status == rhs.status &&
    lhs.joint_name == rhs.joint_name &&
    lhs.joint_control_type == rhs.joint_control_type &&
    lhs.joint_position == rhs.joint_position &&
    lhs.joint_velocity == rhs.joint_velocity &&
    lhs.joint_motor_torque == rhs.joint_motor_torque &&
    lhs.joint_torque_sensor == rhs.joint_torque_sensor &&
    lhs.battery_voltage == rhs.battery_voltage &&
    lhs.right_heel_sensor == rhs.right_heel_sensor &&
    lhs.right_toe_sensor == rhs.right_toe_sensor &&
    lhs.left_heel_sensor == rhs.left_heel_sensor &&
    lhs.left_toe_sensor == rhs.left_toe_sensor &&
    lhs.trigger_input == rhs.trigger_input &&
    lhs.command_app == rhs.command_app &&
    lhs.trigger_counter == rhs.trigger_counter &&
    lhs.runtime_min == rhs.runtime_min &&
    lhs.runtime_sec == rhs.runtime_sec &&
    lhs.runtime_csec == rhs.runtime_csec &&
    lhs.connection_status == rhs.connection_status &&
    lhs.recording_status == rhs.recording_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::h3_msgs::State_<ContainerAllocator1> & lhs, const ::h3_msgs::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace h3_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::h3_msgs::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::h3_msgs::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h3_msgs::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h3_msgs::State_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h3_msgs::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h3_msgs::State_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::h3_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1754db925199a3bf71f290a49b40b780";
  }

  static const char* value(const ::h3_msgs::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1754db925199a3bfULL;
  static const uint64_t static_value2 = 0x71f290a49b40b780ULL;
};

template<class ContainerAllocator>
struct DataType< ::h3_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "h3_msgs/State";
  }

  static const char* value(const ::h3_msgs::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::h3_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# name: The robot name defined in hardware configuration file.\n"
"# joint_control_type: \n"
"# 0: No control selected - Motor disabled.\n"
"# 1: Position controller Selected.\n"
"# 2: Stiffness controller selected.\n"
"# 3: Torque controller selected.\n"
"# 4: Motor disabled.\n"
"# 5: Motor stopped.\n"
"# 6: Open loop enable.\n"
"# 7: Task controller enable, control_type for all joints should be set to 7.\n"
"# status: Useful when control_type selected is task controller enable.\n"
"# 0: Standing up.\n"
"# 1-10: Walking speed from 1 to 10.\n"
"# 11: Joints in passive mode (motors disabled).\n"
"# 12: Joints in compliant mode (zero torque mode).\n"
"# 13: Stopping walk.\n"
"# 14: Performing stand up.\n"
"# 15: Performing sit down.\n"
"# 16: Seated down.\n"
"# 17: Performing left step.\n"
"# 18: Performing right step.\n"
"# 19: All joints blocked.\n"
"# 21: Right hip failure.\n"
"# 22: Right knee failure.\n"
"# 23: Right hip failure.\n"
"# 24: Right hip failure.\n"
"# 25: Right hip failure.\n"
"# 26: Right hip failure.\n"
"# Command_app:\n"
"# 0: The Main Controller wiil process the command received from ROS hardware interface.\n"
"# 1: The Main Controller will process the command received from Bluetooth interface.\n"
"# runtime: Main Controller internal clock.\n"
"# connection_status:\n"
"# 0: Main controller not connected.\n"
"# 1: Main controller connected.\n"
"# recording_status:\n"
"# 0: No data is being recorded.\n"
"# 1: Recording data.\n"
"# 2: Waiting for an input trigger to start data recording.\n"
"# 3: Waiting for an output trigger to start data recording.\n"
"std_msgs/Header header\n"
"string name \n"
"uint8 status\n"
"string[] joint_name\n"
"uint8[] joint_control_type\n"
"float64[] joint_position\n"
"float64[] joint_velocity\n"
"float64[] joint_motor_torque\n"
"float64[] joint_torque_sensor\n"
"float64 battery_voltage\n"
"uint8 right_heel_sensor\n"
"uint8 right_toe_sensor\n"
"uint8 left_heel_sensor\n"
"uint8 left_toe_sensor\n"
"uint8 trigger_input\n"
"uint8 command_app\n"
"uint8 trigger_counter\n"
"uint8 runtime_min\n"
"uint8 runtime_sec\n"
"uint8 runtime_csec\n"
"uint8 connection_status\n"
"uint8 recording_status\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::h3_msgs::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::h3_msgs::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.status);
      stream.next(m.joint_name);
      stream.next(m.joint_control_type);
      stream.next(m.joint_position);
      stream.next(m.joint_velocity);
      stream.next(m.joint_motor_torque);
      stream.next(m.joint_torque_sensor);
      stream.next(m.battery_voltage);
      stream.next(m.right_heel_sensor);
      stream.next(m.right_toe_sensor);
      stream.next(m.left_heel_sensor);
      stream.next(m.left_toe_sensor);
      stream.next(m.trigger_input);
      stream.next(m.command_app);
      stream.next(m.trigger_counter);
      stream.next(m.runtime_min);
      stream.next(m.runtime_sec);
      stream.next(m.runtime_csec);
      stream.next(m.connection_status);
      stream.next(m.recording_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::h3_msgs::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::h3_msgs::State_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "joint_name[]" << std::endl;
    for (size_t i = 0; i < v.joint_name.size(); ++i)
    {
      s << indent << "  joint_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.joint_name[i]);
    }
    s << indent << "joint_control_type[]" << std::endl;
    for (size_t i = 0; i < v.joint_control_type.size(); ++i)
    {
      s << indent << "  joint_control_type[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.joint_control_type[i]);
    }
    s << indent << "joint_position[]" << std::endl;
    for (size_t i = 0; i < v.joint_position.size(); ++i)
    {
      s << indent << "  joint_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_position[i]);
    }
    s << indent << "joint_velocity[]" << std::endl;
    for (size_t i = 0; i < v.joint_velocity.size(); ++i)
    {
      s << indent << "  joint_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_velocity[i]);
    }
    s << indent << "joint_motor_torque[]" << std::endl;
    for (size_t i = 0; i < v.joint_motor_torque.size(); ++i)
    {
      s << indent << "  joint_motor_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_motor_torque[i]);
    }
    s << indent << "joint_torque_sensor[]" << std::endl;
    for (size_t i = 0; i < v.joint_torque_sensor.size(); ++i)
    {
      s << indent << "  joint_torque_sensor[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_torque_sensor[i]);
    }
    s << indent << "battery_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "right_heel_sensor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_heel_sensor);
    s << indent << "right_toe_sensor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_toe_sensor);
    s << indent << "left_heel_sensor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_heel_sensor);
    s << indent << "left_toe_sensor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_toe_sensor);
    s << indent << "trigger_input: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trigger_input);
    s << indent << "command_app: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command_app);
    s << indent << "trigger_counter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trigger_counter);
    s << indent << "runtime_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.runtime_min);
    s << indent << "runtime_sec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.runtime_sec);
    s << indent << "runtime_csec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.runtime_csec);
    s << indent << "connection_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connection_status);
    s << indent << "recording_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recording_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // H3_MSGS_MESSAGE_STATE_H
