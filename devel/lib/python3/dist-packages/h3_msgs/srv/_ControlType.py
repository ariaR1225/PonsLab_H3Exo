# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from h3_msgs/ControlTypeRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ControlTypeRequest(genpy.Message):
  _md5sum = "51373232369629ac2e49d0f1d3e457a1"
  _type = "h3_msgs/ControlTypeRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Select a control type for each joint
uint8 NO_CONTROL = 0
uint8 POSITION_CONTROL = 1
uint8 STIFFNESS_CONTROL = 2
uint8 TORQUE_CONTROL = 3
uint8 MOTOR_DISABLED = 4
uint8 MOTOR_STOPPED = 5
uint8 OPEN_LOOP = 6
uint8 TASK_CONTROLLER = 7
uint8 right_hip
uint8 right_knee
uint8 right_ankle
uint8 left_hip
uint8 left_knee
uint8 left_ankle
"""
  # Pseudo-constants
  NO_CONTROL = 0
  POSITION_CONTROL = 1
  STIFFNESS_CONTROL = 2
  TORQUE_CONTROL = 3
  MOTOR_DISABLED = 4
  MOTOR_STOPPED = 5
  OPEN_LOOP = 6
  TASK_CONTROLLER = 7

  __slots__ = ['right_hip','right_knee','right_ankle','left_hip','left_knee','left_ankle']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       right_hip,right_knee,right_ankle,left_hip,left_knee,left_ankle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlTypeRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.right_hip is None:
        self.right_hip = 0
      if self.right_knee is None:
        self.right_knee = 0
      if self.right_ankle is None:
        self.right_ankle = 0
      if self.left_hip is None:
        self.left_hip = 0
      if self.left_knee is None:
        self.left_knee = 0
      if self.left_ankle is None:
        self.left_ankle = 0
    else:
      self.right_hip = 0
      self.right_knee = 0
      self.right_ankle = 0
      self.left_hip = 0
      self.left_knee = 0
      self.left_ankle = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.right_hip, _x.right_knee, _x.right_ankle, _x.left_hip, _x.left_knee, _x.left_ankle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.right_hip, _x.right_knee, _x.right_ankle, _x.left_hip, _x.left_knee, _x.left_ankle,) = _get_struct_6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.right_hip, _x.right_knee, _x.right_ankle, _x.left_hip, _x.left_knee, _x.left_ankle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.right_hip, _x.right_knee, _x.right_ankle, _x.left_hip, _x.left_knee, _x.left_ankle,) = _get_struct_6B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from h3_msgs/ControlTypeResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ControlTypeResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "h3_msgs/ControlTypeResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success


"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlTypeResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class ControlType(object):
  _type          = 'h3_msgs/ControlType'
  _md5sum = 'af261c0e31694c5bbb9f582a2605febd'
  _request_class  = ControlTypeRequest
  _response_class = ControlTypeResponse
