// Generated by gencpp from file h3_msgs/ControlTypeRequest.msg
// DO NOT EDIT!


#ifndef H3_MSGS_MESSAGE_CONTROLTYPEREQUEST_H
#define H3_MSGS_MESSAGE_CONTROLTYPEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace h3_msgs
{
template <class ContainerAllocator>
struct ControlTypeRequest_
{
  typedef ControlTypeRequest_<ContainerAllocator> Type;

  ControlTypeRequest_()
    : right_hip(0)
    , right_knee(0)
    , right_ankle(0)
    , left_hip(0)
    , left_knee(0)
    , left_ankle(0)  {
    }
  ControlTypeRequest_(const ContainerAllocator& _alloc)
    : right_hip(0)
    , right_knee(0)
    , right_ankle(0)
    , left_hip(0)
    , left_knee(0)
    , left_ankle(0)  {
  (void)_alloc;
    }



   typedef uint8_t _right_hip_type;
  _right_hip_type right_hip;

   typedef uint8_t _right_knee_type;
  _right_knee_type right_knee;

   typedef uint8_t _right_ankle_type;
  _right_ankle_type right_ankle;

   typedef uint8_t _left_hip_type;
  _left_hip_type left_hip;

   typedef uint8_t _left_knee_type;
  _left_knee_type left_knee;

   typedef uint8_t _left_ankle_type;
  _left_ankle_type left_ankle;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NO_CONTROL)
  #undef NO_CONTROL
#endif
#if defined(_WIN32) && defined(POSITION_CONTROL)
  #undef POSITION_CONTROL
#endif
#if defined(_WIN32) && defined(STIFFNESS_CONTROL)
  #undef STIFFNESS_CONTROL
#endif
#if defined(_WIN32) && defined(TORQUE_CONTROL)
  #undef TORQUE_CONTROL
#endif
#if defined(_WIN32) && defined(MOTOR_DISABLED)
  #undef MOTOR_DISABLED
#endif
#if defined(_WIN32) && defined(MOTOR_STOPPED)
  #undef MOTOR_STOPPED
#endif
#if defined(_WIN32) && defined(OPEN_LOOP)
  #undef OPEN_LOOP
#endif
#if defined(_WIN32) && defined(TASK_CONTROLLER)
  #undef TASK_CONTROLLER
#endif

  enum {
    NO_CONTROL = 0u,
    POSITION_CONTROL = 1u,
    STIFFNESS_CONTROL = 2u,
    TORQUE_CONTROL = 3u,
    MOTOR_DISABLED = 4u,
    MOTOR_STOPPED = 5u,
    OPEN_LOOP = 6u,
    TASK_CONTROLLER = 7u,
  };


  typedef boost::shared_ptr< ::h3_msgs::ControlTypeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::h3_msgs::ControlTypeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ControlTypeRequest_

typedef ::h3_msgs::ControlTypeRequest_<std::allocator<void> > ControlTypeRequest;

typedef boost::shared_ptr< ::h3_msgs::ControlTypeRequest > ControlTypeRequestPtr;
typedef boost::shared_ptr< ::h3_msgs::ControlTypeRequest const> ControlTypeRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::h3_msgs::ControlTypeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::h3_msgs::ControlTypeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::h3_msgs::ControlTypeRequest_<ContainerAllocator1> & lhs, const ::h3_msgs::ControlTypeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.right_hip == rhs.right_hip &&
    lhs.right_knee == rhs.right_knee &&
    lhs.right_ankle == rhs.right_ankle &&
    lhs.left_hip == rhs.left_hip &&
    lhs.left_knee == rhs.left_knee &&
    lhs.left_ankle == rhs.left_ankle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::h3_msgs::ControlTypeRequest_<ContainerAllocator1> & lhs, const ::h3_msgs::ControlTypeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace h3_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::h3_msgs::ControlTypeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::h3_msgs::ControlTypeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h3_msgs::ControlTypeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h3_msgs::ControlTypeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h3_msgs::ControlTypeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h3_msgs::ControlTypeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::h3_msgs::ControlTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51373232369629ac2e49d0f1d3e457a1";
  }

  static const char* value(const ::h3_msgs::ControlTypeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51373232369629acULL;
  static const uint64_t static_value2 = 0x2e49d0f1d3e457a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::h3_msgs::ControlTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "h3_msgs/ControlTypeRequest";
  }

  static const char* value(const ::h3_msgs::ControlTypeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::h3_msgs::ControlTypeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Select a control type for each joint\n"
"uint8 NO_CONTROL = 0\n"
"uint8 POSITION_CONTROL = 1\n"
"uint8 STIFFNESS_CONTROL = 2\n"
"uint8 TORQUE_CONTROL = 3\n"
"uint8 MOTOR_DISABLED = 4\n"
"uint8 MOTOR_STOPPED = 5\n"
"uint8 OPEN_LOOP = 6\n"
"uint8 TASK_CONTROLLER = 7\n"
"uint8 right_hip\n"
"uint8 right_knee\n"
"uint8 right_ankle\n"
"uint8 left_hip\n"
"uint8 left_knee\n"
"uint8 left_ankle\n"
;
  }

  static const char* value(const ::h3_msgs::ControlTypeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::h3_msgs::ControlTypeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.right_hip);
      stream.next(m.right_knee);
      stream.next(m.right_ankle);
      stream.next(m.left_hip);
      stream.next(m.left_knee);
      stream.next(m.left_ankle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlTypeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::h3_msgs::ControlTypeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::h3_msgs::ControlTypeRequest_<ContainerAllocator>& v)
  {
    s << indent << "right_hip: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_hip);
    s << indent << "right_knee: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_knee);
    s << indent << "right_ankle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_ankle);
    s << indent << "left_hip: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_hip);
    s << indent << "left_knee: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_knee);
    s << indent << "left_ankle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_ankle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // H3_MSGS_MESSAGE_CONTROLTYPEREQUEST_H
