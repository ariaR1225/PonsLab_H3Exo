# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from h3_msgs/TaskCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TaskCommand(genpy.Message):
  _md5sum = "88f3fcfe7dd2fcc45f8a0dedd7fc97b6"
  _type = "h3_msgs/TaskCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 STOP_GAIT = 0
uint8 WALK_SPEED_1 = 1
uint8 WALK_SPEED_2 = 2
uint8 WALK_SPEED_3 = 3
uint8 WALK_SPEED_4 = 4
uint8 WALK_SPEED_5 = 5
uint8 WALK_SPEED_6 = 6
uint8 WALK_SPEED_7 = 7
uint8 WALK_SPEED_8 = 8
uint8 WALK_SPEED_9 = 9
uint8 WALK_SPEED_10 = 10
uint8 JOINTS_PASSIVE = 11
uint8 JOINTS_COMPLIANT = 12
uint8 STAND_UP = 21
uint8 SIT_DOWN = 22
uint8 PERFORM_RIGHT_STEP = 23
uint8 PERFORM_LEFT_STEP = 24
uint8 RIGHT_MAX_ASSITENCE_10 = 31
uint8 RIGHT_MAX_ASSITENCE_20 = 32
uint8 RIGHT_MAX_ASSITENCE_30 = 33
uint8 RIGHT_MAX_ASSITENCE_40 = 34
uint8 RIGHT_MAX_ASSITENCE_50 = 35
uint8 RIGHT_MAX_ASSITENCE_60 = 36
uint8 RIGHT_MAX_ASSITENCE_70 = 37
uint8 RIGHT_MAX_ASSITENCE_80 = 38
uint8 RIGHT_MAX_ASSITENCE_90 = 39
uint8 RIGHT_MAX_ASSITENCE_100 = 40
uint8 LEFT_MAX_ASSITENCE_10 = 41
uint8 LEFT_MAX_ASSITENCE_20 = 42
uint8 LEFT_MAX_ASSITENCE_30 = 43
uint8 LEFT_MAX_ASSITENCE_40 = 44
uint8 LEFT_MAX_ASSITENCE_50 = 45
uint8 LEFT_MAX_ASSITENCE_60 = 46
uint8 LEFT_MAX_ASSITENCE_70 = 47
uint8 LEFT_MAX_ASSITENCE_80 = 48
uint8 LEFT_MAX_ASSITENCE_90 = 49
uint8 LEFT_MAX_ASSITENCE_100 = 50
uint8 REGAIN_COMMAND = 51
uint8 GIVE_COMMAND = 52
uint8  command"""
  # Pseudo-constants
  STOP_GAIT = 0
  WALK_SPEED_1 = 1
  WALK_SPEED_2 = 2
  WALK_SPEED_3 = 3
  WALK_SPEED_4 = 4
  WALK_SPEED_5 = 5
  WALK_SPEED_6 = 6
  WALK_SPEED_7 = 7
  WALK_SPEED_8 = 8
  WALK_SPEED_9 = 9
  WALK_SPEED_10 = 10
  JOINTS_PASSIVE = 11
  JOINTS_COMPLIANT = 12
  STAND_UP = 21
  SIT_DOWN = 22
  PERFORM_RIGHT_STEP = 23
  PERFORM_LEFT_STEP = 24
  RIGHT_MAX_ASSITENCE_10 = 31
  RIGHT_MAX_ASSITENCE_20 = 32
  RIGHT_MAX_ASSITENCE_30 = 33
  RIGHT_MAX_ASSITENCE_40 = 34
  RIGHT_MAX_ASSITENCE_50 = 35
  RIGHT_MAX_ASSITENCE_60 = 36
  RIGHT_MAX_ASSITENCE_70 = 37
  RIGHT_MAX_ASSITENCE_80 = 38
  RIGHT_MAX_ASSITENCE_90 = 39
  RIGHT_MAX_ASSITENCE_100 = 40
  LEFT_MAX_ASSITENCE_10 = 41
  LEFT_MAX_ASSITENCE_20 = 42
  LEFT_MAX_ASSITENCE_30 = 43
  LEFT_MAX_ASSITENCE_40 = 44
  LEFT_MAX_ASSITENCE_50 = 45
  LEFT_MAX_ASSITENCE_60 = 46
  LEFT_MAX_ASSITENCE_70 = 47
  LEFT_MAX_ASSITENCE_80 = 48
  LEFT_MAX_ASSITENCE_90 = 49
  LEFT_MAX_ASSITENCE_100 = 50
  REGAIN_COMMAND = 51
  GIVE_COMMAND = 52

  __slots__ = ['command']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TaskCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = 0
    else:
      self.command = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.command
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.command,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.command
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.command,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
