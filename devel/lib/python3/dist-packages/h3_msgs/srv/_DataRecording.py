# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from h3_msgs/DataRecordingRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DataRecordingRequest(genpy.Message):
  _md5sum = "f765f7828dc7e940c76651a0e35a708e"
  _type = "h3_msgs/DataRecordingRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Start data recording in a text file using .csv format.
# The data recording can be started/stopped by software o hardware.  
# The file is saved as file_base_name_counter.
# timed:
# true: The data recording finish when the duration_time is completed.
# false: duration_time is ignored.
# duration_time: Data recording time in (seconds.miliseconds).
uint8 SW_STOP_MODE = 0
uint8 SW_START_MODE = 1
uint8 TRIGGER_INPUT_PULSE_MODE = 2
uint8 TRIGGER_INPUT_HIGH_MODE = 3
uint8 TRIGGER_OUTPUT_PULSE_MODE = 4
uint8 TRIGGER_OUTPUT_HIGH_MODE = 5
uint8 recording_trigger_mode
string file_base_name
bool timed
float64 duration_time
"""
  # Pseudo-constants
  SW_STOP_MODE = 0
  SW_START_MODE = 1
  TRIGGER_INPUT_PULSE_MODE = 2
  TRIGGER_INPUT_HIGH_MODE = 3
  TRIGGER_OUTPUT_PULSE_MODE = 4
  TRIGGER_OUTPUT_HIGH_MODE = 5

  __slots__ = ['recording_trigger_mode','file_base_name','timed','duration_time']
  _slot_types = ['uint8','string','bool','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       recording_trigger_mode,file_base_name,timed,duration_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DataRecordingRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.recording_trigger_mode is None:
        self.recording_trigger_mode = 0
      if self.file_base_name is None:
        self.file_base_name = ''
      if self.timed is None:
        self.timed = False
      if self.duration_time is None:
        self.duration_time = 0.
    else:
      self.recording_trigger_mode = 0
      self.file_base_name = ''
      self.timed = False
      self.duration_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.recording_trigger_mode
      buff.write(_get_struct_B().pack(_x))
      _x = self.file_base_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bd().pack(_x.timed, _x.duration_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.recording_trigger_mode,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.file_base_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.file_base_name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.timed, _x.duration_time,) = _get_struct_Bd().unpack(str[start:end])
      self.timed = bool(self.timed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.recording_trigger_mode
      buff.write(_get_struct_B().pack(_x))
      _x = self.file_base_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bd().pack(_x.timed, _x.duration_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.recording_trigger_mode,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.file_base_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.file_base_name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.timed, _x.duration_time,) = _get_struct_Bd().unpack(str[start:end])
      self.timed = bool(self.timed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Bd = None
def _get_struct_Bd():
    global _struct_Bd
    if _struct_Bd is None:
        _struct_Bd = struct.Struct("<Bd")
    return _struct_Bd
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from h3_msgs/DataRecordingResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DataRecordingResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "h3_msgs/DataRecordingResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DataRecordingResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class DataRecording(object):
  _type          = 'h3_msgs/DataRecording'
  _md5sum = '35eb072519df70f467d2bd26462e08fb'
  _request_class  = DataRecordingRequest
  _response_class = DataRecordingResponse
