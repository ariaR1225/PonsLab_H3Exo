// Generated by gencpp from file h3_msgs/JointRequest.msg
// DO NOT EDIT!


#ifndef H3_MSGS_MESSAGE_JOINTREQUEST_H
#define H3_MSGS_MESSAGE_JOINTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace h3_msgs
{
template <class ContainerAllocator>
struct JointRequest_
{
  typedef JointRequest_<ContainerAllocator> Type;

  JointRequest_()
    : right_hip(0.0)
    , right_knee(0.0)
    , right_ankle(0.0)
    , left_hip(0.0)
    , left_knee(0.0)
    , left_ankle(0.0)  {
    }
  JointRequest_(const ContainerAllocator& _alloc)
    : right_hip(0.0)
    , right_knee(0.0)
    , right_ankle(0.0)
    , left_hip(0.0)
    , left_knee(0.0)
    , left_ankle(0.0)  {
  (void)_alloc;
    }



   typedef double _right_hip_type;
  _right_hip_type right_hip;

   typedef double _right_knee_type;
  _right_knee_type right_knee;

   typedef double _right_ankle_type;
  _right_ankle_type right_ankle;

   typedef double _left_hip_type;
  _left_hip_type left_hip;

   typedef double _left_knee_type;
  _left_knee_type left_knee;

   typedef double _left_ankle_type;
  _left_ankle_type left_ankle;





  typedef boost::shared_ptr< ::h3_msgs::JointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::h3_msgs::JointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct JointRequest_

typedef ::h3_msgs::JointRequest_<std::allocator<void> > JointRequest;

typedef boost::shared_ptr< ::h3_msgs::JointRequest > JointRequestPtr;
typedef boost::shared_ptr< ::h3_msgs::JointRequest const> JointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::h3_msgs::JointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::h3_msgs::JointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::h3_msgs::JointRequest_<ContainerAllocator1> & lhs, const ::h3_msgs::JointRequest_<ContainerAllocator2> & rhs)
{
  return lhs.right_hip == rhs.right_hip &&
    lhs.right_knee == rhs.right_knee &&
    lhs.right_ankle == rhs.right_ankle &&
    lhs.left_hip == rhs.left_hip &&
    lhs.left_knee == rhs.left_knee &&
    lhs.left_ankle == rhs.left_ankle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::h3_msgs::JointRequest_<ContainerAllocator1> & lhs, const ::h3_msgs::JointRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace h3_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::h3_msgs::JointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::h3_msgs::JointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h3_msgs::JointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::h3_msgs::JointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h3_msgs::JointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::h3_msgs::JointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::h3_msgs::JointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "365bbecb6df55ae9e96e5ed25a618373";
  }

  static const char* value(const ::h3_msgs::JointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x365bbecb6df55ae9ULL;
  static const uint64_t static_value2 = 0xe96e5ed25a618373ULL;
};

template<class ContainerAllocator>
struct DataType< ::h3_msgs::JointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "h3_msgs/JointRequest";
  }

  static const char* value(const ::h3_msgs::JointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::h3_msgs::JointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Set minimum angles, maximum angles and percentage of assistance.\n"
"float64 right_hip\n"
"float64 right_knee\n"
"float64 right_ankle\n"
"float64 left_hip\n"
"float64 left_knee\n"
"float64 left_ankle\n"
;
  }

  static const char* value(const ::h3_msgs::JointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::h3_msgs::JointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.right_hip);
      stream.next(m.right_knee);
      stream.next(m.right_ankle);
      stream.next(m.left_hip);
      stream.next(m.left_knee);
      stream.next(m.left_ankle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::h3_msgs::JointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::h3_msgs::JointRequest_<ContainerAllocator>& v)
  {
    s << indent << "right_hip: ";
    Printer<double>::stream(s, indent + "  ", v.right_hip);
    s << indent << "right_knee: ";
    Printer<double>::stream(s, indent + "  ", v.right_knee);
    s << indent << "right_ankle: ";
    Printer<double>::stream(s, indent + "  ", v.right_ankle);
    s << indent << "left_hip: ";
    Printer<double>::stream(s, indent + "  ", v.left_hip);
    s << indent << "left_knee: ";
    Printer<double>::stream(s, indent + "  ", v.left_knee);
    s << indent << "left_ankle: ";
    Printer<double>::stream(s, indent + "  ", v.left_ankle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // H3_MSGS_MESSAGE_JOINTREQUEST_H
