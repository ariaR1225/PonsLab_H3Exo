# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from h3_msgs/State.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class State(genpy.Message):
  _md5sum = "1754db925199a3bf71f290a49b40b780"
  _type = "h3_msgs/State"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# name: The robot name defined in hardware configuration file.
# joint_control_type: 
# 0: No control selected - Motor disabled.
# 1: Position controller Selected.
# 2: Stiffness controller selected.
# 3: Torque controller selected.
# 4: Motor disabled.
# 5: Motor stopped.
# 6: Open loop enable.
# 7: Task controller enable, control_type for all joints should be set to 7.
# status: Useful when control_type selected is task controller enable.
# 0: Standing up.
# 1-10: Walking speed from 1 to 10.
# 11: Joints in passive mode (motors disabled).
# 12: Joints in compliant mode (zero torque mode).
# 13: Stopping walk.
# 14: Performing stand up.
# 15: Performing sit down.
# 16: Seated down.
# 17: Performing left step.
# 18: Performing right step.
# 19: All joints blocked.
# 21: Right hip failure.
# 22: Right knee failure.
# 23: Right hip failure.
# 24: Right hip failure.
# 25: Right hip failure.
# 26: Right hip failure.
# Command_app:
# 0: The Main Controller wiil process the command received from ROS hardware interface.
# 1: The Main Controller will process the command received from Bluetooth interface.
# runtime: Main Controller internal clock.
# connection_status:
# 0: Main controller not connected.
# 1: Main controller connected.
# recording_status:
# 0: No data is being recorded.
# 1: Recording data.
# 2: Waiting for an input trigger to start data recording.
# 3: Waiting for an output trigger to start data recording.
std_msgs/Header header
string name 
uint8 status
string[] joint_name
uint8[] joint_control_type
float64[] joint_position
float64[] joint_velocity
float64[] joint_motor_torque
float64[] joint_torque_sensor
float64 battery_voltage
uint8 right_heel_sensor
uint8 right_toe_sensor
uint8 left_heel_sensor
uint8 left_toe_sensor
uint8 trigger_input
uint8 command_app
uint8 trigger_counter
uint8 runtime_min
uint8 runtime_sec
uint8 runtime_csec
uint8 connection_status
uint8 recording_status



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','name','status','joint_name','joint_control_type','joint_position','joint_velocity','joint_motor_torque','joint_torque_sensor','battery_voltage','right_heel_sensor','right_toe_sensor','left_heel_sensor','left_toe_sensor','trigger_input','command_app','trigger_counter','runtime_min','runtime_sec','runtime_csec','connection_status','recording_status']
  _slot_types = ['std_msgs/Header','string','uint8','string[]','uint8[]','float64[]','float64[]','float64[]','float64[]','float64','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,name,status,joint_name,joint_control_type,joint_position,joint_velocity,joint_motor_torque,joint_torque_sensor,battery_voltage,right_heel_sensor,right_toe_sensor,left_heel_sensor,left_toe_sensor,trigger_input,command_app,trigger_counter,runtime_min,runtime_sec,runtime_csec,connection_status,recording_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(State, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.name is None:
        self.name = ''
      if self.status is None:
        self.status = 0
      if self.joint_name is None:
        self.joint_name = []
      if self.joint_control_type is None:
        self.joint_control_type = b''
      if self.joint_position is None:
        self.joint_position = []
      if self.joint_velocity is None:
        self.joint_velocity = []
      if self.joint_motor_torque is None:
        self.joint_motor_torque = []
      if self.joint_torque_sensor is None:
        self.joint_torque_sensor = []
      if self.battery_voltage is None:
        self.battery_voltage = 0.
      if self.right_heel_sensor is None:
        self.right_heel_sensor = 0
      if self.right_toe_sensor is None:
        self.right_toe_sensor = 0
      if self.left_heel_sensor is None:
        self.left_heel_sensor = 0
      if self.left_toe_sensor is None:
        self.left_toe_sensor = 0
      if self.trigger_input is None:
        self.trigger_input = 0
      if self.command_app is None:
        self.command_app = 0
      if self.trigger_counter is None:
        self.trigger_counter = 0
      if self.runtime_min is None:
        self.runtime_min = 0
      if self.runtime_sec is None:
        self.runtime_sec = 0
      if self.runtime_csec is None:
        self.runtime_csec = 0
      if self.connection_status is None:
        self.connection_status = 0
      if self.recording_status is None:
        self.recording_status = 0
    else:
      self.header = std_msgs.msg.Header()
      self.name = ''
      self.status = 0
      self.joint_name = []
      self.joint_control_type = b''
      self.joint_position = []
      self.joint_velocity = []
      self.joint_motor_torque = []
      self.joint_torque_sensor = []
      self.battery_voltage = 0.
      self.right_heel_sensor = 0
      self.right_toe_sensor = 0
      self.left_heel_sensor = 0
      self.left_toe_sensor = 0
      self.trigger_input = 0
      self.command_app = 0
      self.trigger_counter = 0
      self.runtime_min = 0
      self.runtime_sec = 0
      self.runtime_csec = 0
      self.connection_status = 0
      self.recording_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status
      buff.write(_get_struct_B().pack(_x))
      length = len(self.joint_name)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.joint_control_type
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.joint_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint_position))
      length = len(self.joint_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint_velocity))
      length = len(self.joint_motor_torque)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint_motor_torque))
      length = len(self.joint_torque_sensor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.joint_torque_sensor))
      _x = self
      buff.write(_get_struct_d12B().pack(_x.battery_voltage, _x.right_heel_sensor, _x.right_toe_sensor, _x.left_heel_sensor, _x.left_toe_sensor, _x.trigger_input, _x.command_app, _x.trigger_counter, _x.runtime_min, _x.runtime_sec, _x.runtime_csec, _x.connection_status, _x.recording_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.joint_name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.joint_control_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_motor_torque = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_torque_sensor = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.battery_voltage, _x.right_heel_sensor, _x.right_toe_sensor, _x.left_heel_sensor, _x.left_toe_sensor, _x.trigger_input, _x.command_app, _x.trigger_counter, _x.runtime_min, _x.runtime_sec, _x.runtime_csec, _x.connection_status, _x.recording_status,) = _get_struct_d12B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status
      buff.write(_get_struct_B().pack(_x))
      length = len(self.joint_name)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.joint_control_type
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.joint_position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_position.tostring())
      length = len(self.joint_velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_velocity.tostring())
      length = len(self.joint_motor_torque)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_motor_torque.tostring())
      length = len(self.joint_torque_sensor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.joint_torque_sensor.tostring())
      _x = self
      buff.write(_get_struct_d12B().pack(_x.battery_voltage, _x.right_heel_sensor, _x.right_toe_sensor, _x.left_heel_sensor, _x.left_toe_sensor, _x.trigger_input, _x.command_app, _x.trigger_counter, _x.runtime_min, _x.runtime_sec, _x.runtime_csec, _x.connection_status, _x.recording_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 1
      (self.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.joint_name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.joint_control_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_motor_torque = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joint_torque_sensor = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 20
      (_x.battery_voltage, _x.right_heel_sensor, _x.right_toe_sensor, _x.left_heel_sensor, _x.left_toe_sensor, _x.trigger_input, _x.command_app, _x.trigger_counter, _x.runtime_min, _x.runtime_sec, _x.runtime_csec, _x.connection_status, _x.recording_status,) = _get_struct_d12B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d12B = None
def _get_struct_d12B():
    global _struct_d12B
    if _struct_d12B is None:
        _struct_d12B = struct.Struct("<d12B")
    return _struct_d12B
